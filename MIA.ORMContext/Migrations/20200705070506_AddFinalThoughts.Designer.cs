// <auto-generated />
using System;
using MIA.ORMContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MIA.ORMContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200705070506_AddFinalThoughts")]
    partial class AddFinalThoughts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MIA.Authorization.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MIA.Authorization.Entities.UserModule", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<long>("AllowedModules");

                    b.HasKey("UserId");

                    b.ToTable("UserModule");
                });

            modelBuilder.Entity("MIA.Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("MainGallery");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MIA.Models.Entities.AlbumItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumId");

                    b.Property<long>("DateCreated");

                    b.Property<bool>("Featured");

                    b.Property<int>("MediaType");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumItems");
                });

            modelBuilder.Entity("MIA.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("MIA.Models.Entities.Artwork", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowFileUpload");

                    b.Property<string>("AwardId");

                    b.Property<int>("BroadcastYear");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("FirstPlaceId");

                    b.Property<bool?>("IllegibleForJudge");

                    b.Property<string>("NomineeId");

                    b.Property<string>("OnlineChannels");

                    b.Property<string>("ProductionLicenseAgency");

                    b.Property<string>("ProductionLicenseNumber");

                    b.Property<int>("ProductionYear");

                    b.Property<string>("ProjectName");

                    b.Property<string>("SecondPlaceId");

                    b.Property<string>("SiteUrl");

                    b.Property<string>("TvChannels");

                    b.Property<bool>("UploadComplete");

                    b.Property<string>("YourRoleId");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NomineeId");

                    b.HasIndex("YourRoleId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("MIA.Models.Entities.ArtworkPayment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ArtworkId");

                    b.Property<string>("CardHolderName");

                    b.Property<string>("CardType");

                    b.Property<bool>("IsOffline");

                    b.Property<string>("Last4Digits");

                    b.Property<long>("PaymentDate");

                    b.Property<string>("PaymentId");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("TransactionNumber");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ArtworkPayments");
                });

            modelBuilder.Entity("MIA.Models.Entities.ArtworkReview", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtworkId");

                    b.Property<string>("Comments");

                    b.Property<long>("Date");

                    b.Property<string>("Email");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ArtworkReviews");
                });

            modelBuilder.Entity("MIA.Models.Entities.ArtworkSubject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ArtworkSubjects");
                });

            modelBuilder.Entity("MIA.Models.Entities.Award", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ArtworkFee");

                    b.Property<int>("AwardType");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("FirstPlaceId");

                    b.Property<string>("ManagerId");

                    b.Property<int>("Order");

                    b.Property<string>("SecondPlaceId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FirstPlaceId")
                        .IsUnique()
                        .HasFilter("[FirstPlaceId] IS NOT NULL");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SecondPlaceId")
                        .IsUnique()
                        .HasFilter("[SecondPlaceId] IS NOT NULL");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("MIA.Models.Entities.Booth", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<decimal>("Price");

                    b.Property<bool>("Sellable");

                    b.HasKey("Id");

                    b.ToTable("Booths");
                });

            modelBuilder.Entity("MIA.Models.Entities.BoothPayment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("BoothPurchaseId");

                    b.Property<string>("CardHolderName");

                    b.Property<string>("CardType");

                    b.Property<bool>("IsOffline");

                    b.Property<string>("Last4Digits");

                    b.Property<long>("PaymentDate");

                    b.Property<string>("PaymentId");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("TransactionNumber");

                    b.HasKey("Id");

                    b.ToTable("BoothPayments");
                });

            modelBuilder.Entity("MIA.Models.Entities.BoothPurchase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BoothId");

                    b.Property<string>("CellPhone1");

                    b.Property<string>("CellPhone2");

                    b.Property<string>("CompanyFieldOfBusiness");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactPersonName");

                    b.Property<string>("ContactPersonTitle");

                    b.Property<string>("Email");

                    b.Property<string>("ExtraDetails");

                    b.Property<string>("Fax");

                    b.Property<string>("Nationality");

                    b.Property<string>("PaymentId");

                    b.Property<string>("Phone");

                    b.Property<bool>("PrintingOption");

                    b.Property<bool>("ScreenOption");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.ToTable("BoothPurchases");
                });

            modelBuilder.Entity("MIA.Models.Entities.ContactUsSubject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ContactUsSubjects");
                });

            modelBuilder.Entity("MIA.Models.Entities.Content", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContentType");

                    b.Property<string>("Data");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("MIA.Models.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MIA.Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MIA.Models.Entities.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeArtworkScore", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtworkId");

                    b.Property<string>("FinalThoughts");

                    b.Property<string>("JudgeId");

                    b.Property<int>("Level");

                    b.Property<decimal>("Percentage");

                    b.Property<decimal>("Score");

                    b.Property<decimal>("ScoreTotal");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("JudgeId");

                    b.ToTable("ArtworkScores");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeAward", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardId");

                    b.Property<string>("JudgeId");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("JudgeId");

                    b.ToTable("JudgeAwards");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeComment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("JudgeId");

                    b.Property<string>("MediaFileId");

                    b.Property<string>("MediaTime");

                    b.HasKey("Id");

                    b.HasIndex("JudgeId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("JudgeComments");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeVote", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtworkId");

                    b.Property<string>("CriteriaId");

                    b.Property<string>("JudgeId");

                    b.Property<int>("VotingValue");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("JudgeId");

                    b.ToTable("JudgeVotes");
                });

            modelBuilder.Entity("MIA.Models.Entities.MediaFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtWorkId");

                    b.Property<string>("Description");

                    b.Property<long>("UploadDate");

                    b.HasKey("Id");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("MIA.Models.Entities.News", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("Category");

                    b.Property<long>("Date");

                    b.Property<bool>("Featured");

                    b.Property<string>("Keywords");

                    b.Property<bool>("Outdated");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("MIA.Models.Entities.NewsComment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<long>("Date");

                    b.Property<string>("Email");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("Name");

                    b.Property<string>("NewsId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsComments");
                });

            modelBuilder.Entity("MIA.Models.Entities.ProductionYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductionYears");
                });

            modelBuilder.Entity("MIA.Models.Entities.VotingCriteria", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardId");

                    b.Property<string>("Code");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<decimal>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.ToTable("VotingCriterias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Property<int>("AuditEntryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EntitySetName")
                        .HasMaxLength(255);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(255);

                    b.Property<int>("State");

                    b.Property<string>("StateName")
                        .HasMaxLength(255);

                    b.HasKey("AuditEntryID");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.Property<int>("AuditEntryPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEntryID");

                    b.Property<string>("NewValueFormatted")
                        .HasColumnName("NewValue");

                    b.Property<string>("OldValueFormatted")
                        .HasColumnName("OldValue");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(255);

                    b.Property<string>("RelationName")
                        .HasMaxLength(255);

                    b.HasKey("AuditEntryPropertyID");

                    b.HasIndex("AuditEntryID");

                    b.ToTable("AuditEntryProperties");
                });

            modelBuilder.Entity("MIA.Models.Entities.Judge", b =>
                {
                    b.HasBaseType("MIA.Models.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Judge");
                });

            modelBuilder.Entity("MIA.Models.Entities.Nominee", b =>
                {
                    b.HasBaseType("MIA.Models.Entities.AppUser");

                    b.Property<string>("CompanyName");

                    b.Property<string>("JobTitle");

                    b.HasDiscriminator().HasValue("Nominee");
                });

            modelBuilder.Entity("MIA.Models.Entities.TrophyImage", b =>
                {
                    b.HasBaseType("MIA.Models.Entities.Image");

                    b.HasDiscriminator().HasValue("TrophyImage");
                });

            modelBuilder.Entity("MIA.Models.Entities.UserImage", b =>
                {
                    b.HasBaseType("MIA.Models.Entities.Image");

                    b.Property<string>("UserId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("UserImage");
                });

            modelBuilder.Entity("MIA.Models.Entities.AlbumItem", b =>
                {
                    b.HasOne("MIA.Models.Entities.Album", "Album")
                        .WithMany("MediaItems")
                        .HasForeignKey("AlbumId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "File", b1 =>
                        {
                            b1.Property<string>("AlbumItemId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("AlbumItemId");

                            b1.ToTable("AlbumItems");

                            b1.HasOne("MIA.Models.Entities.AlbumItem")
                                .WithOne("File")
                                .HasForeignKey("MIA.Models.Entities.S3File", "AlbumItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "Poster", b1 =>
                        {
                            b1.Property<string>("AlbumItemId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("AlbumItemId");

                            b1.ToTable("AlbumItems");

                            b1.HasOne("MIA.Models.Entities.AlbumItem")
                                .WithOne("Poster")
                                .HasForeignKey("MIA.Models.Entities.S3File", "AlbumItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.Artwork", b =>
                {
                    b.HasOne("MIA.Models.Entities.Award", "Award")
                        .WithMany("Artworks")
                        .HasForeignKey("AwardId");

                    b.HasOne("MIA.Models.Entities.Genre", "Category")
                        .WithMany("Artworks")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MIA.Models.Entities.Nominee", "Nominee")
                        .WithMany("Artworks")
                        .HasForeignKey("NomineeId");

                    b.HasOne("MIA.Models.Entities.ArtworkSubject", "YourRole")
                        .WithMany("Artworks")
                        .HasForeignKey("YourRoleId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "Cover", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("Cover")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "File1", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("File1")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "File2", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("File2")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "File3", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("File3")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "Poster", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("Poster")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "Resume", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("Resume")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "Trailer", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("Trailer")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("MIA.Models.Entities.S3File", "TrailerPoster", b1 =>
                        {
                            b1.Property<string>("ArtworkId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkId");

                            b1.ToTable("Artworks");

                            b1.HasOne("MIA.Models.Entities.Artwork")
                                .WithOne("TrailerPoster")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.ArtworkPayment", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "Artwork")
                        .WithMany()
                        .HasForeignKey("ArtworkId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "Receipt", b1 =>
                        {
                            b1.Property<string>("ArtworkPaymentId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("ArtworkPaymentId");

                            b1.ToTable("ArtworkPayments");

                            b1.HasOne("MIA.Models.Entities.ArtworkPayment")
                                .WithOne("Receipt")
                                .HasForeignKey("MIA.Models.Entities.S3File", "ArtworkPaymentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.ArtworkReview", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "Artwork")
                        .WithMany("Reviews")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MIA.Models.Entities.Award", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "FirstPlace")
                        .WithOne("FirstPlace")
                        .HasForeignKey("MIA.Models.Entities.Award", "FirstPlaceId");

                    b.HasOne("MIA.Models.Entities.Judge", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("MIA.Models.Entities.Artwork", "SecondPlace")
                        .WithOne("SecondPlace")
                        .HasForeignKey("MIA.Models.Entities.Award", "SecondPlaceId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "Trophy", b1 =>
                        {
                            b1.Property<string>("AwardId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("AwardId");

                            b1.ToTable("Awards");

                            b1.HasOne("MIA.Models.Entities.Award")
                                .WithOne("Trophy")
                                .HasForeignKey("MIA.Models.Entities.S3File", "AwardId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.BoothPayment", b =>
                {
                    b.OwnsOne("MIA.Models.Entities.S3File", "Receipt", b1 =>
                        {
                            b1.Property<string>("BoothPaymentId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("BoothPaymentId");

                            b1.ToTable("BoothPayments");

                            b1.HasOne("MIA.Models.Entities.BoothPayment")
                                .WithOne("Receipt")
                                .HasForeignKey("MIA.Models.Entities.S3File", "BoothPaymentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.BoothPurchase", b =>
                {
                    b.HasOne("MIA.Models.Entities.Booth", "Booth")
                        .WithMany("Purchases")
                        .HasForeignKey("BoothId");

                    b.HasOne("MIA.Models.Entities.BoothPayment", "Payment")
                        .WithOne("BoothPurchase")
                        .HasForeignKey("MIA.Models.Entities.BoothPurchase", "PaymentId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "CompanyLogo", b1 =>
                        {
                            b1.Property<string>("BoothPurchaseId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("BoothPurchaseId");

                            b1.ToTable("BoothPurchases");

                            b1.HasOne("MIA.Models.Entities.BoothPurchase")
                                .WithOne("CompanyLogo")
                                .HasForeignKey("MIA.Models.Entities.S3File", "BoothPurchaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeArtworkScore", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "Artwork")
                        .WithMany("FinalScores")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("MIA.Models.Entities.Judge", "Judge")
                        .WithMany("FinalScores")
                        .HasForeignKey("JudgeId");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeAward", b =>
                {
                    b.HasOne("MIA.Models.Entities.Award", "Award")
                        .WithMany("AllJudges")
                        .HasForeignKey("AwardId");

                    b.HasOne("MIA.Models.Entities.Judge", "Judge")
                        .WithMany("Awards")
                        .HasForeignKey("JudgeId");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeComment", b =>
                {
                    b.HasOne("MIA.Models.Entities.Judge", "Judge")
                        .WithMany("Comments")
                        .HasForeignKey("JudgeId");

                    b.HasOne("MIA.Models.Entities.MediaFile", "MediaFile")
                        .WithMany("Comments")
                        .HasForeignKey("MediaFileId");
                });

            modelBuilder.Entity("MIA.Models.Entities.JudgeVote", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "Artwork")
                        .WithMany("Votes")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("MIA.Models.Entities.VotingCriteria", "Criteria")
                        .WithMany("ArtworkVotes")
                        .HasForeignKey("CriteriaId");

                    b.HasOne("MIA.Models.Entities.Judge", "Judge")
                        .WithMany("JudgeVotes")
                        .HasForeignKey("JudgeId");
                });

            modelBuilder.Entity("MIA.Models.Entities.MediaFile", b =>
                {
                    b.HasOne("MIA.Models.Entities.Artwork", "ArtWork")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ArtWorkId");

                    b.OwnsOne("MIA.Models.Entities.S3File", "File", b1 =>
                        {
                            b1.Property<string>("MediaFileId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("MediaFileId");

                            b1.ToTable("MediaFiles");

                            b1.HasOne("MIA.Models.Entities.MediaFile")
                                .WithOne("File")
                                .HasForeignKey("MIA.Models.Entities.S3File", "MediaFileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.News", b =>
                {
                    b.OwnsOne("MIA.Models.Entities.S3File", "Poster", b1 =>
                        {
                            b1.Property<string>("NewsId");

                            b1.Property<string>("FileKey");

                            b1.Property<string>("FileUrl");

                            b1.HasKey("NewsId");

                            b1.ToTable("News");

                            b1.HasOne("MIA.Models.Entities.News")
                                .WithOne("Poster")
                                .HasForeignKey("MIA.Models.Entities.S3File", "NewsId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MIA.Models.Entities.NewsComment", b =>
                {
                    b.HasOne("MIA.Models.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MIA.Models.Entities.VotingCriteria", b =>
                {
                    b.HasOne("MIA.Models.Entities.Award", "Award")
                        .WithMany("VotingCriterias")
                        .HasForeignKey("AwardId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MIA.Authorization.Entities.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MIA.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MIA.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MIA.Authorization.Entities.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MIA.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MIA.Models.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.HasOne("Z.EntityFramework.Plus.AuditEntry", "Parent")
                        .WithMany("Properties")
                        .HasForeignKey("AuditEntryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MIA.Models.Entities.UserImage", b =>
                {
                    b.HasOne("MIA.Models.Entities.AppUser")
                        .WithOne("AvatarImage")
                        .HasForeignKey("MIA.Models.Entities.UserImage", "UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
