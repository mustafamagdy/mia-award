<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MIA</name>
    </assembly>
    <members>
        <member name="T:MIA.Api.AccountController">
            <summary>
            User account operations controller
            </summary>
        </member>
        <member name="M:MIA.Api.AccountController.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{MIA.Api.AccountController},Microsoft.Extensions.Localization.IStringLocalizer{MIA.Api.AccountController})">
            <summary>
            
            </summary>
            <param name="mapper"></param>
            <param name="logger"></param>
            <param name="_locale"></param>
        </member>
        <member name="M:MIA.Api.AccountController.CreateByEmail(System.String,MIA.Dto.Auth.SignUpByEmailRequest,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder,MIA.Api.Base.IApiUrlHelper)">
            <summary>
            SignUp using email and password
            </summary>
            <param name="culture"></param>
            <param name="signupData"></param>
            <param name="userManager"></param>
            <param name="emailSender"></param>
            <param name="emailTemplateProvjudgeIder"></param>
            <param name="urlHelper"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AccountController.CreateUserByMobile(MIA.Dto.Auth.SignUpByMobileRequest)">
            <summary>
            SignUp using email and password
            </summary>
            <param name="mobileRequestData"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AccountController.VerifyEmail(System.String,MIA.Dto.Auth.UserVerificationRequest,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder)">
            <summary>
            Verify user email using the verification token sent by email
            </summary>
            <param name="culture"></param>
            <param name="userRequest"></param>
            <param name="userManager"></param>
            <param name="emailSender"></param>
            <param name="emailTemplateProvjudgeIder"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AccountController.ForgotPassword(System.String,MIA.Dto.Auth.ForgotPasswordRequest,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder,MIA.Api.Base.IApiUrlHelper)">
            <summary>
            Reset password reset email with token
            </summary>
            <param name="culture"></param>
            <param name="forgotPass"></param>
            <param name="userManager"></param>
            <param name="emailSender"></param>
            <param name="emailTemplateProvjudgeIder"></param>
            <param name="urlHelper"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AccountController.ResetPassword(System.String,MIA.Dto.Auth.ResetPasswordRequest,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder)">
            <summary>
            Reset password for user using token
            </summary>
            <param name="culture"></param>
            <param name="resetPassword"></param>
            <param name="userManager"></param>
            <param name="emailSender"></param>
            <param name="emailTemplateProvjudgeIder"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Api.AdminController">
            <summary>
            Admin tasks controller
            </summary>
        </member>
        <member name="M:MIA.Api.AdminController.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{MIA.Api.AdminController},Microsoft.Extensions.Localization.IStringLocalizer{MIA.Api.AdminController})">
            <summary>
            
            </summary>
            <param name="mapper"></param>
            <param name="logger"></param>
            <param name="locale"></param>
        </member>
        <member name="T:MIA.Api.AuthController">
            <summary>
            Authentication controller for different judgeIdentity operations
            </summary>
        </member>
        <member name="M:MIA.Api.AuthController.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{MIA.Api.AuthController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MIA.Api.AuthController.Login(System.String,MIA.Dto.Auth.LoginRequest,Microsoft.AspNetCore.Identity.SignInManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.Extensions.Options.IOptions{MIA.Infrastructure.Options.JwtOptions},Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{MIA.Models.Entities.AppUser})">
            <summary>
            Login using username and password
            </summary>
            <param name="userIp"></param>
            <param name="loginData">Login details</param>
            <param name="signInManager"></param>
            <param name="userManager"></param>
            <param name="jwtOptions"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AuthController.Logout(System.String,Microsoft.AspNetCore.Identity.SignInManager{MIA.Models.Entities.AppUser},MIA.MjudgeIddlewares.Auth.IAuthTokenManager)">
            <summary>
            Logout and deactivate user auth token
            </summary>
            <param name="authorization"></param>
            <param name="signinManager"></param>
            <param name="tokenManager"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.AuthController.RefreshToken(MIA.Dto.Auth.RefreshTokenRequest)">
            <summary>
            Refresh token, and discard the old one
            </summary>
            <param name="tokenData"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Api.Base.AuditUserResolver">
            <summary>
            Get the current User, Id, and name
            </summary>
        </member>
        <member name="M:MIA.Api.Base.AuditUserResolver.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser})">
            <summary>
            Initialize with <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/> and <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/>
            </summary>
            <param name="context"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:MIA.Api.Base.AuditUserResolver.CurrentUsername">
            <summary>
            Get current username if exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.AuditUserResolver.CurrentUserAsync">
            <summary>
            Get current logged in user 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIA.Api.Base.BaseApiController`1">
            <summary>
            base controller
            </summary>
        </member>
        <member name="F:MIA.Api.Base.BaseApiController`1._mapper">
            <summary>
            logger to be used for logging 
            </summary>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.#ctor(Microsoft.Extensions.Logging.ILogger{`0},AutoMapper.IMapper)">
            <summary>
            constructor for base class
            </summary>
            <param name="logger">Controller based logger</param>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.Ok``1(X.PagedList.IPagedList{``0})">
            <summary>
            includes metadata for pagedlist as JSON serializer will not
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.IfFound``1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if a collection has any element, if no return not found with no content
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.IfFound``1(X.PagedList.IPagedList{``0})">
            <summary>
            Checks if collection is empty will rturn 404, otherwise will ok with paged list data
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.IfFound``1(``0)">
            <summary>
            Checks if result is not null if null will return 404
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.ValjudgeIdationError(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IdentityError})">
            <summary>
            Converts <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> list into <see cref="T:Microsoft.AspNetCore.Mvc.ValjudgeIdationProblemDetails"/>
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.ValjudgeIdationError(System.Net.HttpStatusCode,System.String)">
            <summary>
            Converts simple string to error object
            </summary>
            <param name="statusCode"></param>
            <param name="error"></param>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.NotFound404(System.String)">
            <summary>
            returns valjudgeIdation errors with 404 status code
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.ForbjudgeId403(System.String)">
            <summary>
            returns valjudgeIdation errors with 403 status code
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:MIA.Api.Base.BaseApiController`1.Unauthorized401(System.String)">
            <summary>
            returns valjudgeIdation errors with 401 status code
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:MIA.Api.LookupsController">
            <summary>
            
            </summary>
        </member>
        <member name="T:MIA.Api.ReportsController">
            <summary>
            
            </summary>
        </member>
        <member name="T:MIA.Api.SystemController">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.Api.SystemController.Ping">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIA.Api.TestController">
            <summary>
            Test controller for checking internal features
            </summary>
        </member>
        <member name="M:MIA.Api.TestController.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{MIA.Api.TestController})">
            <summary>
            
            </summary>
            <param name="mapper"></param>
            <param name="logger"></param>
        </member>
        <member name="M:MIA.Api.TestController.ProjectWithPagination(MIA.ORMContext.Uow.IAppUnitOfWork)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Api.TestController.TestEmail(System.String,Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder)">
            <summary>
            
            </summary>
            <param name="cultureCode"></param>
            <param name="emailSender"></param>
            <param name="emailTemplateProvjudgeIder"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Attrributes.TransactionIsolationLevelAttribute">
            <summary>
            Allow actions to specify <seealso cref="T:System.Data.IsolationLevel"/> using attributes
            </summary>
        </member>
        <member name="P:MIA.Attrributes.TransactionIsolationLevelAttribute.Level">
            <summary>
            transaction isolation level
            </summary>
        </member>
        <member name="M:MIA.Attrributes.TransactionIsolationLevelAttribute.#ctor(System.Data.IsolationLevel)">
            <summary>
            Constructor to allow user to pass <see cref="T:System.Data.IsolationLevel"/>
            </summary>
            <param name="level"></param>
        </member>
        <member name="T:MIA.Constants.CacheProfileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:MIA.Constants.CacheProfileName.StaticFiles">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIA.Constants.CorsPolicyName">
            <summary>
            Constant for CORS policies
            </summary>
        </member>
        <member name="F:MIA.Constants.CorsPolicyName.AllowAll">
            <summary>
            allow all cors policy
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.ForgotPasswordRequest">
            <summary>
            Request for password reset
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ForgotPasswordRequest.Email">
            <summary>
            user email to send password link to
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.ResetPasswordRequest">
            <summary>
            Request for reset password with token
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ResetPasswordRequest.UserId">
            <summary>
            Email for the user to reset password
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ResetPasswordRequest.Code">
            <summary>
            token send to user reset password for
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ResetPasswordRequest.NewPassword">
            <summary>
            New password to reset the old password with
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ResetPasswordRequest.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ChangePasswordRequest.NewPassword">
            <summary>
            New password to reset the old password with
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.ChangePasswordRequest.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.LoginRequest">
            <summary>
            Login request dto for authenticating users
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.LoginRequest.UserName">
            <summary>
            Username for login user
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.LoginRequest.Password">
            <summary>
            Password for login user
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.RefreshTokenRequest">
            <summary>
            Refresh token request
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.RefreshTokenRequest.AuthToken">
            <summary>
            Old authentication token
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.UserDataDto">
            <summary>
            abstract class for user data dto
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.UserDataDto.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.UserDataDto.LastName">
            <summary>
            Last name 
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.SignUpByEmailRequest">
            <summary>
            Signup using email and password
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.SignUpByEmailRequest.Email">
            <summary>
            email for signup
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.SignUpByEmailRequest.Password">
            <summary>
            password for user signup
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.UserVerificationRequest">
            <summary>
            Token verification request
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.UserVerificationRequest.UserId">
            <summary>
            UserId to get valjudgeIdate
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.UserVerificationRequest.Code">
            <summary>
            Token to use for verification
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.SignUpByMobileRequest">
            <summary>
            Signup using mobile number
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.SignUpByMobileRequest.CountryCode">
            <summary>
            Country code for user mobile number
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.SignUpByMobileRequest.MobileNumber">
            <summary>
            User mobile number to valjudgeIdate
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.SignUpByMobileVerifyRequest">
            <summary>
            Verify user mobile number by sending verification code t it
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.SignUpByMobileVerifyRequest.VerificationCode">
            <summary>
            Verification code sent to user to valjudgeIdate his mobile number
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.SignUpByMobileCompleteRequest">
            <summary>
            Complete user verification to signup user
            </summary>
        </member>
        <member name="T:MIA.Dto.Auth.UserDetailsDto">
            <summary>
            User details dto
            </summary>
        </member>
        <member name="P:MIA.Dto.Auth.UserDetailsDto.UserName">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:MIA.Dto.Base.BaseRequest">
            <summary>
            Base class for all Dtos
            </summary>
        </member>
        <member name="T:MIA.Dto.Base.BaseResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:MIA.BaseDto">
            <summary>
            abstract class for all kind of dtos (request, and response)
            </summary>
        </member>
        <member name="T:MIA.BaseDtoExtensions">
            <summary>
            Base dto extension for automapper
            </summary>
        </member>
        <member name="M:MIA.BaseDtoExtensions.Configure(AutoMapper.IMapper)">
            <summary>
            This method should be called from Startup class to pass the IMapper instance built from AutoMapper
            </summary>
            <param name="mapper"></param>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(MIA.BaseDto)">
            <summary>
            Map dto to T type
            </summary>
            <param name="dto"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(MIA.BaseDto,AutoMapper.IMapper)">
            <summary>
            Map dto to T type using IMapper configuration
            </summary>
            <param name="dto"></param>
            <param name="mapper"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(System.Collections.Generic.IEnumerable{MIA.BaseDto},AutoMapper.IMapper)">
            <summary>
            Map IEnumerable of dtos using IMapper configuration
            </summary>
            <param name="dto"></param>
            <param name="mapper"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(MIA.BaseDto[],AutoMapper.IMapper)">
            <summary>
            Map array of dtos using IMapper configuration
            </summary>
            <param name="dto"></param>
            <param name="mapper"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(System.Collections.IEnumerable)">
            <summary>
            Map any IEnumerable to IEnumerable
            </summary>
            <param name="dto"></param>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``2(``0,``1@)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <param name="target"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(MIA.Models.Entities.BaseEntity)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIA.BaseDtoExtensions.MapTo``1(MIA.Models.Entities.BaseEntity,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <param name="mapper"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:MIA.Exceptions.ApiErrorType.DataUpdateException">
            
        </member>
        <member name="M:MIA.Exceptions.ApiException.GetErrorAttribute(MIA.Exceptions.ApiErrorType)">
            <summary>
            Helper function to get the Error attribute values from <see cref="T:MIA.Exceptions.ApiErrorType"/> enum
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Exceptions.ErrorAttribute">
            <summary>
            Decorator for all <see cref="T:MIA.Exceptions.ApiErrorType"/> enum values to describe its meaning
            </summary>
        </member>
        <member name="M:MIA.Exceptions.ErrorAttribute.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Constructor that receives a <paramref name="code"/> as a string
            </summary>
            <param name="code"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:MIA.Exceptions.ErrorAttribute.Code">
            <summary>
            predefined error code
            </summary>
        </member>
        <member name="P:MIA.Exceptions.ErrorAttribute.Message">
            <summary>
            Description message for the error
            </summary>
        </member>
        <member name="M:MIA.Exceptions.ErrorAttribute.GetErrorAttribute``1(``0)">
            <summary>
            Get custom enum error 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Exceptions.IError">
            <summary>
            General interface for all kind of errors with a message
            </summary>
        </member>
        <member name="T:MIA.Exceptions.IValjudgeIdationSummary">
            <summary>
            ValjudgeIdation summary for valjudgeIdation errors
            </summary>
        </member>
        <member name="P:MIA.Exceptions.IValjudgeIdationSummary.IsValjudgeId">
            <summary>
            Read-only returning true if only the object under test is valjudgeId
            </summary>
        </member>
        <member name="P:MIA.Exceptions.IValjudgeIdationSummary.Errors">
            <summary>
            List of valjudgeIdation errors
            </summary>
        </member>
        <member name="T:MIA.Exceptions.IValjudgeIdationSummary`1">
            <summary>
            Generic version of <see cref="T:MIA.Exceptions.IValjudgeIdationSummary"/>
            </summary>
            <typeparam name="TError"></typeparam>
        </member>
        <member name="P:MIA.Exceptions.IValjudgeIdationSummary`1.Errors">
            <summary>
            List of custom errors that inherits from <see cref="!:TError"/>
            </summary>
        </member>
        <member name="T:MIA.Exceptions.ValjudgeIdationException">
            <summary>
            All data valjudgeIdation exceptions should inherit from this
            </summary>
        </member>
        <member name="P:MIA.Exceptions.ValjudgeIdationException.ValjudgeIdationResult">
            <summary>
            ValjudgeIdation result retuned from the server
            </summary>
        </member>
        <member name="P:MIA.Exceptions.ValjudgeIdationException.Entity">
            <summary>
            The entity that is not valjudgeId
            </summary>
        </member>
        <member name="M:MIA.Exceptions.ValjudgeIdationException.#ctor(System.Object,MIA.Exceptions.IValjudgeIdationSummary)">
            <summary>
            Constructor that receives the entity that is invaljudgeId, and a valjudgeIdation summary
            </summary>
            <param name="Entity"></param>
            <param name="valjudgeIdationResult"></param>
        </member>
        <member name="T:MIA.Extensions.ApplicationBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.Extensions.ApplicationBuilderExtensions.UseDeveloperErrorPages(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds developer friendly error pages for the application which contain extra debug and exception information.
            Note: It is unsafe to use this in production.
            </summary>
        </member>
        <member name="M:MIA.Extensions.ApplicationBuilderExtensions.UseCustomExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use exceotion mjudgeIddleware
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ApplicationBuilderExtensions.UseStaticFilesWithCacheControl(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the static files mjudgeIddleware to serve static files. Also adds the Cache-Control and Pragma HTTP
            headers. The cache duration is controlled from configuration.
            See http://andrewlock.net/adding-cache-control-headers-to-static-files-in-asp-net-core/.
            </summary>
        </member>
        <member name="M:MIA.Extensions.ApplicationBuilderExtensions.UseCustomSwaggerUI(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ApplicationBuilderExtensions.UseRouteUrlCultureProvjudgeIder(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Add supported locales, and mjudgeIddleware to determine the approperiate locale according to route url
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Extensions.BusinessExtensions">
            <summary>
            Business extension methods for startup class configuration
            </summary>
        </member>
        <member name="M:MIA.Extensions.BusinessExtensions.AddProjectMappers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds mapper profile
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.BusinessExtensions.AddProjectRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds data access repositories
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.BusinessExtensions.AddProjectApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds application services
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Extensions.MvcCoreBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.Extensions.MvcCoreBuilderExtensions.AddCustomCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)">
            <summary>
            Add cross-origin resource sharing (CORS) services and configures named CORS policies. See
            https://docs.asp.net/en/latest/security/cors.html
            </summary>
        </member>
        <member name="M:MIA.Extensions.MvcCoreBuilderExtensions.AddCustomJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Adds customized JSON serializer settings.
            </summary>
        </member>
        <member name="M:MIA.Extensions.MvcCoreBuilderExtensions.AddCustomMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Extensions.ServiceExtensions">
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
            <summary>
            Extension methods to configure startup class
            </summary>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds versioning with default version if not specified to 1.0
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures caching for the application. Registers the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> and
            <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> types with the services collection or IoC container. The
            <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is intended to be used in cloud hosted scenarios where there is a shared
            cache, which is shared between multiple instances of the application. Use the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            otherwise.
            </summary>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds dynamic response compression to enable GZIP compression of responses. This is turned off for HTTPS
            requests by default to avojudgeId the BREACH security vulnerability.
            </summary>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add custom routing settings which determines how URL's are generated.
            </summary>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds unit of work service to DI
            </summary>
            <typeparam name="T">DbContext type</typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddAppDbContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds DbContext with default configuration, this also configured for dev/test/production environments
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.UpdateDatabase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Update the database by running pending migrations
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddSMTPEmailSender(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add SMTP email provjudgeIder as default email sender
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds health check endpoint for different services (asp.net, sql, ...)
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomStrictTransportSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the Strict-Transport-Security HTTP header to responses. This HTTP header is only relevant if you are
            using TLS. It ensures that content is loaded over HTTPS and refuses to connect in case of certificate
            errors and warnings.
            See https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security and
            http://www.troyhunt.com/2015/06/understanding-http-strict-transport.html
            Note: Including subdomains and a minimum maxage of 18 weeks is required for preloading.
            Note: You can refer to the following article to clear the HSTS cache in your browser:
            http://classically.me/blogs/how-clear-hsts-settings-major-browsers
            </summary>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddIdentityWithJwt(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Adds asp.net core Identity with default configuration with jwt
            </summary>
            <param name="services"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds localization resource files and strategies
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddMvcWithOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds custom application options from appsettings.json
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddPermissions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds asp.net core Identity with default configuration with jwt
            </summary>
            <param name="services"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add redis cache support, will be used for jwt tokens, and 2nd level cache for EF
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddSpaFiles(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Adds single page application files (react front-end application)
            </summary>
            <param name="services"></param>
            <param name="env"></param>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.UseSpaFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Helper function to add SPA static files 
            </summary>
            <param name="app">IApplicationBuilder instance </param>
            <returns></returns>
        </member>
        <member name="M:MIA.Extensions.ServiceExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Swagger services and configures the Swagger services.
            </summary>
        </member>
        <member name="T:MIA.Filters.UnitOfWorkTransactionFilter">
            <summary>
            Apply UOW on every request by starting transaction and commit it if there is no exception
            </summary>
        </member>
        <member name="M:MIA.Filters.UnitOfWorkTransactionFilter.#ctor(MIA.ORMContext.Uow.IUnitOfWork,Microsoft.Extensions.Logging.ILogger{MIA.Filters.UnitOfWorkTransactionFilter})">
            <summary>
            Constructor to inject <see cref="T:MIA.ORMContext.Uow.IUnitOfWork"/>
            </summary>
            <param name="uow"></param>
            <param name="logger"></param>
        </member>
        <member name="M:MIA.Filters.UnitOfWorkTransactionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.MappingProfiles.ApiProfile">
            <summary>
            Auto mapper profile that contain mapping used in Api project
            </summary>
        </member>
        <member name="M:MIA.MappingProfiles.ApiProfile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MIA.MjudgeIddlewares.ApiExceptionHandlerMjudgeIddleware">
            <summary>
            Api exception handler mjudgeIddle ware to handle unhandeled exceptions and wrap them in ApiException class
            </summary>
        </member>
        <member name="T:MIA.MjudgeIddlewares.Auth.AuthTokenManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManager.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Options.IOptions{MIA.Infrastructure.Options.JwtOptions})">
            <summary>
            Constructor
            </summary>
            <param name="cache"></param>
            <param name="httpContextAccessor"></param>
            <param name="jwtOptions"></param>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManager.IsCurrentActiveToken">
            <summary>
            check if the current token is not deactivated
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManager.DeactivateCurrentAsync">
            <summary>
            deactivate current token
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManager.IsActiveAsync(System.String)">
            <summary>
            check if token is active
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManager.DeactivateAsync(System.String)">
            <summary>
            deactivate token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.MjudgeIddlewares.Auth.AuthTokenManagerMjudgeIddleware">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManagerMjudgeIddleware.#ctor(MIA.MjudgeIddlewares.Auth.IAuthTokenManager)">
            <summary>
            constructor
            </summary>
            <param name="tokenManager"></param>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.AuthTokenManagerMjudgeIddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            ValjudgeIdate user has access token
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.MjudgeIddlewares.Auth.IAuthTokenManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.IAuthTokenManager.IsCurrentActiveToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.IAuthTokenManager.DeactivateCurrentAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.IAuthTokenManager.IsActiveAsync(System.String)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.MjudgeIddlewares.Auth.IAuthTokenManager.DeactivateAsync(System.String)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.RequestedPageHeaderModelBinderProvjudgeIder">
            <summary>
            ProvjudgeIder for Requested Page model binder
            </summary>
        </member>
        <member name="M:MIA.RequestedPageHeaderModelBinderProvjudgeIder.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProvjudgeIderContext)">
            <summary>
            ValjudgeIdate if the model binder is suitable or not
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.RequestedPageHeaderModelBinder">
            <summary>
            RequestedPage model binder to convert header json to RequestedPage instance
            </summary>
        </member>
        <member name="M:MIA.RequestedPageHeaderModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Try to bind RequestedPage instance from headers json
            </summary>
            <param name="BindingContext"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.OperationFilters.ApiVersionOperationFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.OperationFilters.ApiVersionOperationFilter.Apply(Swashbuckle.AspNetCore.Swagger.Operation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:MIA.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:MIA.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Program.LogAndRun(Microsoft.AspNetCore.Hosting.IWebHost)">
            <summary>
            
            </summary>
            <param name="webHost"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.Program.GetAssemblyProductName">
            <summary>
            Helper function to get assembly product name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIA.Program.ConfigureKestrelServerLimits(Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions)">
            <summary>
            Configure Kestrel server limits from appsettings.json is not supported. So we manually copy them from config.
            See https://github.com/aspnet/KestrelHttpServer/issues/2216
            </summary>
        </member>
        <member name="T:MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder">
            <summary>
            Culture aware email template to load email template according to provjudgeIded culture code
            </summary>
        </member>
        <member name="M:MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder.GetEmailTemplateAsync(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cultureCode"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.ProvjudgeIders.ICultureEmailTemplateProvjudgeIder.GetHtmlMessageAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="cultureCode"></param>
            <param name="name"></param>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder">
            <summary>
            ProvjudgeIder for email templates that are loaded from local drive
            </summary>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.GetEmailTemplateAsync(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cultureCode"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.GetEmailTemplateAsync(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Performs the keyword replacement on the provjudgeIde email template.
            </summary>
            <remarks>
            Values written to the email template are Html encoded.
            </remarks>
            <param name="template"></param>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.GetHtmlMessageAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:MIA.ProvjudgeIders.LocalEmailTemplateProvjudgeIder.GetHtmlMessageAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="cultureCode"></param>
            <param name="name"></param>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.ProvjudgeIders.UrlRequestCultureProvjudgeIder">
            <summary>
            ProvjudgeIder getting current culture from route url
            </summary>
        </member>
        <member name="M:MIA.ProvjudgeIders.UrlRequestCultureProvjudgeIder.DetermineProvjudgeIderCultureResult(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Determine culture according to route url
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:MIA.Startup">
            <summary>
            Startup class for asp.net core Api
            </summary>
        </member>
        <member name="M:MIA.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Constructor for startup class, to inject required dependencies
            </summary>
            <param name="configuration">Used to read configuration from appsettings.json</param>
            <param name="hostingEnvironment">Used to configure hosting environment</param>
        </member>
        <member name="M:MIA.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register different services in asp.net core dependency container
            </summary>
            <param name="services">service collection to add to</param>
            <returns></returns>
        </member>
        <member name="M:MIA.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Identity.UserManager{MIA.Models.Entities.AppUser},Microsoft.AspNetCore.Identity.RoleManager{MIA.Authorization.Entities.AppRole},MIA.ORMContext.Uow.IAppUnitOfWork)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="userManager"></param>
            <param name="roleManager"></param>
            <param name="db"></param>
        </member>
    </members>
</doc>
